{"version":3,"sources":["store/actions/channelsList.js","store/actions/channels.js","components/channel-topics/channel-topics.js","components/channel-topics/index.js","components/channels-list/channels-list.js","components/channels-list/index.js"],"names":["channelsListFetchDataSuccess","channels","type","CHANNELS_LIST_FETCH_DATA_SUCCESS","payload","channelsListFetchData","thid","dispatch","fetch","then","response","ok","Error","statusText","json","channelsFetchData","url","console","log","CHANNELS_FETCH_DATA_SUCCESS","channelsFetchDataSuccess","ChannelTopics","listOfChannels","props","channelList","this","fetchData","loading","className","Spinner","map","item","index","to","onClick","name","Component","connect","state","channelTopics","ChannelsList","match","params","src","logo","alt","xvid","title","channelsList"],"mappings":"yGAAA,8CAEO,SAASA,EAA6BC,GACzC,MAAO,CACHC,KAAMC,IACNC,QAASH,GAIV,SAASI,IAAiC,IAAXC,EAAU,uDAAH,EACzC,OAAO,SAACC,GACJC,MAAM,sDAAD,OAAuDF,IACvDG,MAAK,SAAAC,GACF,IAAIA,EAASC,GAAI,MAAM,IAAIC,MAAMF,EAASG,YAE1C,OAAOH,KAEVD,MAAK,SAAAC,GAAQ,OAAIA,EAASI,UAC1BL,MAAK,SAAAR,GAAQ,OAAIM,EAASP,EAA6BC,U,uHCT7D,SAASc,EAAkBC,GAC9B,OAAO,SAACT,GACJC,MAAMQ,GACDP,MAAK,SAAAC,GAEF,GADAO,QAAQC,IAAI,WAAYR,IACpBA,EAASC,GAAI,MAAM,IAAIC,MAAMF,EAASG,YAE1C,OAAOH,KAEVD,MAAK,SAAAC,GAAQ,OAAIA,EAASI,UAC1BL,MAAK,SAAAR,GAAQ,OAAIM,EAjBvB,SAAkCN,GACrC,MAAO,CACHC,KAAMiB,IACNf,QAASH,GAcsBmB,CAAyBnB,Q,2CCX1DoB,E,4MAIFC,eAAiB,SAAChB,GACd,EAAKiB,MAAMC,YAAYlB,I,uDAJ3B,WACImB,KAAKF,MAAMG,UAAU,2C,oBAKzB,WAAU,IAAD,SACuBD,KAAKF,MAA1BtB,EADF,EACEA,SAAU0B,EADZ,EACYA,QACjB,OACI,qBAAKC,UAAU,eAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,qGACA,qBAAKA,UAAU,uBAAf,SACI,6BAEQD,EAAU,cAACE,EAAA,EAAD,IACV5B,EAAS6B,KAAI,SAACC,EAAMC,GAChB,OAAO,6BACH,cAAC,IAAD,CAASC,GAAI,IAAMF,EAAKzB,KAAM4B,QAAS,kBAAM,EAAKZ,eAAeS,EAAKzB,OAAtE,SAA8EyB,EAAKI,QADvEH,mB,GAlBxBI,aA6CbC,eAdS,SAAAC,GACpB,MAAO,CACHrC,SAAUqC,EAAMC,cAAcf,YAC9BG,QAASW,EAAMC,cAAcZ,YAIV,SAAApB,GACvB,MAAO,CACHmB,UAAW,SAAAV,GAAG,OAAIT,EAASQ,EAAkBC,KAC7CQ,YAAa,SAAAlB,GAAI,OAAIC,EAASF,YAAsBC,QAI7C+B,CAA6ChB,GCpD7CA,a,8JCOTmB,E,uKACF,WACIf,KAAKF,MAAMG,UAAUD,KAAKF,MAAMkB,MAAMC,OAAOpC,Q,oBAEjD,WAAU,IAAD,SACuBmB,KAAKF,MAA1BtB,EADF,EACEA,SAAU0B,EADZ,EACYA,QACjB,OACI,qCACI,cAAC,UAAD,IACA,qBAAKC,UAAU,oBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,kKACA,qBAAKA,UAAU,qBAAf,SACI,6BAEQD,EAAU,cAACE,EAAA,EAAD,IACV5B,EAAS6B,KAAI,SAACC,EAAMC,GAChB,OAAO,+BACH,qBAAKW,IAAK,sBAAwBZ,EAAKa,KAAMC,IAAI,SACjD,cAAC,IAAD,CAAMZ,GAAI,IAAM,EAAKV,MAAMkB,MAAMC,OAAOpC,KAAO,IAAMyB,EAAKe,KAA1D,SAAiEf,EAAKgB,UAF1Df,sB,GAjB7BI,aA6CZC,eAbS,SAAAC,GACpB,MAAO,CACHrC,SAAUqC,EAAMU,aAAaxB,YAC7BG,QAASW,EAAMU,aAAarB,YAIT,SAAApB,GACvB,MAAO,CACHmB,UAAW,SAAAV,GAAG,OAAIT,EAASF,YAAsBW,QAI1CqB,CAA6CG,GCpD7CA","file":"static/js/3.9e4df5d2.chunk.js","sourcesContent":["import {CHANNELS_LIST_FETCH_DATA_SUCCESS} from './action-types';\r\n\r\nexport function channelsListFetchDataSuccess(channels) {\r\n    return {\r\n        type: CHANNELS_LIST_FETCH_DATA_SUCCESS,\r\n        payload: channels\r\n    }\r\n}\r\n\r\nexport function channelsListFetchData(thid = 1) {\r\n    return (dispatch) => {\r\n        fetch(`https://epg.domru.ru/channel/list?domain=perm&thid=${thid}`)\r\n            .then(response => {\r\n                if(!response.ok) throw new Error(response.statusText)\r\n\r\n                return response;\r\n            })\r\n            .then(response => response.json())\r\n            .then(channels => dispatch(channelsListFetchDataSuccess(channels)))\r\n    }\r\n}","import {CHANNELS_FETCH_DATA_SUCCESS} from './action-types';\r\n\r\nexport function channelsFetchDataSuccess(channels) {\r\n    return {\r\n        type: CHANNELS_FETCH_DATA_SUCCESS,\r\n        payload: channels\r\n    }\r\n}\r\n\r\nexport function channelsFetchData(url) {\r\n    return (dispatch) => {\r\n        fetch(url)\r\n            .then(response => {\r\n                console.log('response', response);\r\n                if(!response.ok) throw new Error(response.statusText)\r\n\r\n                return response;\r\n            })\r\n            .then(response => response.json())\r\n            .then(channels => dispatch(channelsFetchDataSuccess(channels)))\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { channelsFetchData } from '../../store/actions/channels';\r\nimport { channelsListFetchData } from '../../store/actions/channelsList';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Spinner from '../Spinner'\r\nimport './channel-topics.css';\r\n\r\nclass ChannelTopics extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchData(\"http://epg.domru.ru/channeltheme/list\")\r\n    }\r\n    listOfChannels = (thid) => {\r\n        this.props.channelList(thid)\r\n    }\r\n    render() {\r\n        const {channels, loading} = this.props;\r\n        return (\r\n            <div className=\"channel-list\">\r\n                <div className=\"channel-list-group\">\r\n                    <h2>Темы каналов</h2>\r\n                    <div className=\"channel-list__slider\">\r\n                        <ul>\r\n                            {\r\n                                loading ? <Spinner /> :\r\n                                channels.map((item, index) => {\r\n                                    return <li key={index}>\r\n                                        <NavLink to={\"/\" + item.thid} onClick={() => this.listOfChannels(item.thid)}>{item.name}</NavLink>\r\n                                    </li>\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        channels: state.channelTopics.channelList,\r\n        loading: state.channelTopics.loading,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchData: url => dispatch(channelsFetchData(url)),\r\n        channelList: thid => dispatch(channelsListFetchData(thid))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelTopics);","import ChannelTopics from './channel-topics';\r\nexport default ChannelTopics;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { channelsListFetchData } from '../../store/actions/channelsList';\r\nimport ChannelTopics from '../channel-topics';\r\nimport Spinner from '../Spinner';\r\nimport {Link} from 'react-router-dom';\r\nimport './channels-list.css';\r\n\r\nclass ChannelsList extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchData(this.props.match.params.thid)\r\n    }\r\n    render() {\r\n        const {channels, loading} = this.props;\r\n        return (\r\n            <>\r\n                <ChannelTopics />\r\n                <div className=\"view-all-channels\">\r\n                    <div className=\"view-channels\">\r\n                        <h2>Список всех телеканалов</h2>\r\n                        <div className=\"list-channels-item\">\r\n                            <ul>\r\n                                {\r\n                                    loading ? <Spinner /> :\r\n                                    channels.map((item, index) => {\r\n                                        return <li key={index}>\r\n                                            <img src={\"http://epg.domru.ru\" + item.logo} alt=\"logo\" />\r\n                                            <Link to={'/' + this.props.match.params.thid + '/' + item.xvid}>{item.title}</Link>\r\n                                        </li>\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        channels: state.channelsList.channelList,\r\n        loading: state.channelsList.loading\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchData: url => dispatch(channelsListFetchData(url))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelsList);","import ChannelsList from './channels-list';\r\nexport default ChannelsList;"],"sourceRoot":""}