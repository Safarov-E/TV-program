{"version":3,"sources":["store/actions/channelListItem.js","components/channel-list-item/channel-list-item.js","components/channel-list-item/index.js"],"names":["channelsListItemFetchData","xvid","date","Date","currentDate","getFullYear","getMonth","getDate","dispatch","fetch","then","response","ok","Error","statusText","json","channels","type","CHANNELS_LIST_ITEM_FETCH_DATA_SUCCESS","payload","channelsListItemFetchDataSuccess","ChannelListItem","console","log","this","props","fetchData","match","params","loading","className","Spinner","map","item","index","startProgram","start","duration","h","getHours","m","getMinutes","hours","minutes","curretTime","getTime","end","currentProgress","title","style","width","Component","connect","state","channelListItem"],"mappings":"8LASO,SAASA,EAA0BC,GACtC,IAAMC,EAAO,IAAIC,KACXC,EAAcF,EAAKG,cAAgB,KAAOH,EAAKI,WAAa,GAAK,IAAMJ,EAAKK,UAClF,OAAO,SAACC,GACJC,MAAM,0DAAD,OAA2DL,EAA3D,iCAA+FA,EAA/F,8BAAgIH,IAChIS,MAAK,SAAAC,GACF,IAAIA,EAASC,GAAI,MAAM,IAAIC,MAAMF,EAASG,YAE1C,OAAOH,KAEVD,MAAK,SAAAC,GAAQ,OAAIA,EAASI,UAC1BL,MAAK,SAAAM,GAAQ,OAAIR,EAlBvB,SAA0CQ,GAC7C,MAAO,CACHC,KAAMC,IACNC,QAASH,GAesBI,CAAiCJ,Q,2BCdlEK,E,uKACF,WACIC,QAAQC,IAAI,uBACZC,KAAKC,MAAMC,UAAUF,KAAKC,MAAME,MAAMC,OAAO3B,Q,oBAEjD,WAAU,IAAD,EAC8BuB,KAAKC,MAAjCT,EADF,EACEA,SAAUa,EADZ,EACYA,QAASF,EADrB,EACqBA,MAC1B,OACI,qBAAKG,UAAU,4BAAf,SACQ,qBAAKA,UAAU,uBAAf,SACI,6BAEQD,GAAkD,qBAAhCb,EAASW,EAAMC,OAAO3B,MAAwB,cAAC8B,EAAA,EAAD,IAChEf,EAASQ,KAAKC,MAAME,MAAMC,OAAO3B,MAAM+B,KAAI,SAACC,EAAMC,GAC9C,IAAMC,EAAe,IAAIhC,KAAK8B,EAAKG,OAC7BC,GAAYJ,EAAKI,SACjBC,EAAIH,EAAaI,WACjBC,EAAIL,EAAaM,aACjBC,EAAQJ,EAAI,GAAM,IAAMA,EAAKA,EAC7BK,EAAUH,EAAI,GAAM,IAAMA,EAAKA,EAC/BI,GAAc,IAAIzC,MAAQ0C,UAAY,IACtCT,EAAQD,EAAaU,UAAY,IACjCC,EAAMV,EAAQC,EACdU,EAA0C,IAAMV,GAA7BO,EAAaR,GAEtC,OAAO,+BACK,sBAAKN,UAAU,qBAAf,UACI,iCAAOY,EAAP,IAAeC,KACf,4BAAIV,EAAKe,WAEZJ,GAAcR,GAASQ,GAAcE,EACtC,qBAAKhB,UAAU,8BAAf,SACI,qBAAKA,UAAU,kCAAkCmB,MAAO,CAACC,MAAM,GAAD,OAAKH,EAAL,UAEhE,OATEb,gB,GAzBtBiB,aA0DfC,eAbS,SAAAC,GACpB,MAAO,CACHrC,SAAUqC,EAAMC,gBAAgBA,gBAChCzB,QAASwB,EAAMC,gBAAgBzB,YAIZ,SAAArB,GACvB,MAAO,CACHkB,UAAW,SAAAzB,GAAI,OAAIO,EAASR,EAA0BC,QAI/CmD,CAA6C/B,GC/D7CA","file":"static/js/5.3211a42b.chunk.js","sourcesContent":["import {CHANNELS_LIST_ITEM_FETCH_DATA_SUCCESS} from './action-types';\r\n\r\nexport function channelsListItemFetchDataSuccess(channels) {\r\n    return {\r\n        type: CHANNELS_LIST_ITEM_FETCH_DATA_SUCCESS,\r\n        payload: channels\r\n    }\r\n}\r\n\r\nexport function channelsListItemFetchData(xvid) {\r\n    const date = new Date();\r\n    const currentDate = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\r\n    return (dispatch) => {\r\n        fetch(`http://epg.domru.ru/program/list?domain=perm&date_from=${currentDate}+00%3A00%3A00&date_to=${currentDate}+23%3A55%3A00&xvid=${xvid}`)\r\n            .then(response => {\r\n                if(!response.ok) throw new Error(response.statusText)\r\n\r\n                return response;\r\n            })\r\n            .then(response => response.json())\r\n            .then(channels => dispatch(channelsListItemFetchDataSuccess(channels)))\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {channelsListItemFetchData} from '../../store/actions/channelListItem';\r\nimport Spinner from '../Spinner';\r\nimport './channel-list-item.css';\r\n\r\nclass ChannelListItem extends Component {\r\n    componentDidMount() {\r\n        console.log('componentDidMount()');\r\n        this.props.fetchData(this.props.match.params.xvid);\r\n    }\r\n    render() {\r\n        const {channels, loading, match} = this.props;\r\n        return (\r\n            <div className=\"tv-programm__chanels-item\">\r\n                    <div className=\"tv-programm__channel\">\r\n                        <ul>\r\n                            {\r\n                                loading || typeof channels[match.params.xvid] === 'undefined' ? <Spinner /> :\r\n                                channels[this.props.match.params.xvid].map((item, index) => {\r\n                                    const startProgram = new Date(item.start);\r\n                                    const duration = +item.duration;\r\n                                    const h = startProgram.getHours();\r\n                                    const m = startProgram.getMinutes();\r\n                                    const hours = h < 10 ? (\"0\" + h) : h;\r\n                                    const minutes = m < 10 ? (\"0\" + m) : m;\r\n                                    const curretTime = (new Date()).getTime() / 1000;\r\n                                    const start = startProgram.getTime() / 1000;\r\n                                    const end = start + duration;\r\n                                    const currentProgress = (curretTime - start) * (100 / duration);\r\n\r\n                                    return <li key={index}>\r\n                                                <div className=\"program__list-link\">\r\n                                                    <span>{hours}:{minutes}</span>\r\n                                                    <p>{item.title}</p>\r\n                                                </div>\r\n                                                {curretTime >= start && curretTime <= end ? \r\n                                                <div className=\"program__list-item-progress\">\r\n                                                    <div className=\"program__list-item-progress-bar\" style={{width: `${currentProgress}%`}}></div>\r\n                                                </div>\r\n                                                : null}\r\n                                            </li>\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        channels: state.channelListItem.channelListItem,\r\n        loading: state.channelListItem.loading\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchData: xvid => dispatch(channelsListItemFetchData(xvid))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelListItem);","import ChannelListItem from './channel-list-item';\r\nexport default ChannelListItem;"],"sourceRoot":""}